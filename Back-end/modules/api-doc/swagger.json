{
  "openapi": "3.0.0",
  "info": {
    "title": "< Cyber-chic - Shop APIS ‚ù§Ô∏èüíª >",
    "description": "",
    "version": "1.0.0"
  },

  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "User token for authentication: **Bearer [user_token]**"
      }
    }
  },

  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["Auth üîê"],
        "summary": "For User Register",
        "description": "Default OTP: 1111",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "mehranKhodaei"
                  },
                  "phone": {
                    "type": "string",
                    "example": "09123334444"
                  },
                  "password": {
                    "type": "string",
                    "example": "12345678"
                  },
                  "confirmPassword": {
                    "type": "string",
                    "example": "12345678"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success Register User"
          },
          "403": {
            "description": "Username Already exist"
          },
          "401": {
            "description": "phone Number Blocked"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Auth üîê"],
        "summary": "For User Login",
        "description": "For User Login with username and paassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "mehran"
                  },
                  "password": {
                    "type": "string",
                    "example": "12345678"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "user logged in successfully"
          },
          "401": {
            "description": "Invalid Data (Username Or Password)"
          }
        }
      }
    },

    "/auth/getCode": {
      "post": {
        "summary": "Request Reset Password Code",
        "description": "Generates a reset password code and sends it to the provided email address.",
        "tags": ["Auth üîê"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "khodaei.dev@gmail.com"
                  }
                },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset password code sent successfully."
          },
          "404": {
            "description": "Email not valid."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },

    "/auth/verifyCode": {
      "post": {
        "summary": "Verify Reset Password Code",
        "description": "Verifies the reset password code sent to the user's email and generates a token if successful.",
        "tags": ["Auth üîê"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "khodaei.dev@gmail.com"
                  },
                  "code": {
                    "type": "string",
                    "example": "12345"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Code verified successfully, returns a user token."
          },
          "400": {
            "description": "The entered code is not correct."
          },
          "403": {
            "description": "The code has expired, please request a new one."
          },
          "404": {
            "description": "Email not valid."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/auth/reset-password/{token}": {
      "post": {
        "summary": "Reset Password",
        "description": "Resets the user's password using a valid reset token.",
        "tags": ["Auth üîê"],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "description": "The reset password token.",
            "schema": {
              "type": "string",
              "example": "a1b2c3d4e5f6g7h8i9j0"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "example": "newStrongPassword123!"
                  },
                  "confirmPassword": {
                    "type": "string",
                    "example": "newStrongPassword123!"
                  }
                },
                "required": ["password", "confirmPassword"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password updated successfully."
          },
          "403": {
            "description": "Invalid token or User not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },

    "/category/": {
      "get": {
        "tags": ["Category üìÅ"],
        "summary": "Fetch Categories (Get all Categories and Sub Categories)",
        "description": "",
        "responses": {
          "200": {
            "description": "All categories will be returned"
          }
        }
      },
      "post": {
        "tags": ["Admin Dashboard üìà"],
        "summary": "Create a new category",
        "description": "",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Title Text"
                  },
                  "href": {
                    "type": "string",
                    "example": "title-href-text"
                  },
                  "parent": {
                    "type": "objectId",
                    "example": "66793a5bbb4dd75a84f0bae7",
                    "required": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category created"
          },
          "400": {
            "description": "Req Body Validation Err"
          },
          "401": {
            "description": "Admin Token is not valid"
          },
          "403": {
            "description": "category is already exist"
          }
        }
      }
    },
    "/category/{categoryId}": {
      "put": {
        "tags": ["Admin Dashboard üìà"],
        "summary": "Edit a category",
        "description": "",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "example": "Title Text"
                  },
                  "href": {
                    "example": "title-href-text"
                  },
                  "parent": {
                    "example": "parentCategoryId"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edited successfully"
          },
          "400": {
            "description": "one of the parameters is not valid"
          },
          "401": {
            "description": "Admin Token is not valid"
          },
          "404": {
            "description": "Category not found"
          }
        }
      },
      "delete": {
        "tags": ["Admin Dashboard üìà"],
        "summary": "Remove a category",
        "description": "",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "401": {
            "description": "Admin Token is not valid"
          },
          "404": {
            "description": "Category not found"
          }
        }
      }
    },
    "/category/sub": {
      "get": {
        "tags": ["Sub Category üìÇ"],
        "summary": "Get all sub categories",
        "description": "",
        "responses": {
          "200": {
            "description": "All sub categories will be returned"
          },
          "404": {
            "description": "Sub Categories Not Found!!"
          }
        }
      },
      "post": {
        "tags": ["Admin Dashboard üìà"],
        "summary": "Create a sub category",
        "description": "",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "example": "Title Text"
                  },
                  "href": {
                    "example": "title-href-text"
                  },
                  "parent": {
                    "example": "parent CategoryId"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SubCategory created"
          },
          "400": {
            "description": "one of the parameters is not valid"
          },
          "401": {
            "description": "Admin Token is not valid"
          }
        }
      }
    },
    "/category/sub/{categoryId}": {
      "get": {
        "tags": ["Sub Category üìÇ"],
        "summary": "Get a sub category",
        "description": "",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SubCategory will be returned"
          },
          "400": {
            "description": "Category ID is not correct !!"
          },
          "404": {
            "description": "SubCategory not found"
          }
        }
      },
      "delete": {
        "tags": ["Admin Dashboard üìà"],
        "summary": "Remove a sub category",
        "description": "",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "Category ID is not correct !!"
          },
          "401": {
            "description": "Admin Token is not valid"
          },
          "404": {
            "description": "SubCategory not found"
          }
        }
      }
    },

    "/locations/": {
      "get": {
        "tags": ["Location üó∫"],
        "summary": "Get all locations",
        "description": "",
        "responses": {
          "200": {
            "description": "cities, provinces, and neighborhoods will be returned"
          }
        }
      }
    },

    "/products": {
      "post": {
        "tags": ["Admin Dashboard üìà"],
        "summary": "create new product",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "href": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "subCategory": {
                    "type": "string",
                    "description": "The ID of the Sub Category (MongoDB ObjectId).",
                    "example": "64b2fc0c3c2c4e8f12a45678"
                  },
                  "category": {
                    "type": "string",
                    "description": "The ID of the category (MongoDB ObjectId).",
                    "example": "64b2fc0c3c2c4e8f12a45678"
                  },
                  "price": {
                    "type": "Number",
                    "example": 22000000
                  },
                  "quantity": {
                    "type": "Number",
                    "example": 30
                  },
                  "brand": {
                    "type": "string",
                    "enum": [
                      "apple",
                      "samsung",
                      "xiaomi",
                      "asus",
                      "huawei",
                      "hp"
                    ]
                  },
                  "discountPercent": {
                    "type": "Number",
                    "example": "5"
                  },

                  "attributes": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object",
                      "description": "A key-value pair for attributes, value can be any type."
                    },
                    "description": "A map of attributes with key-value pairs.",
                    "example": {
                      "color": "red",
                      "size": "large",
                      "weight": 1.5
                    }
                  },

                  "images": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "created product will be returned"
          },
          "401": {
            "description": "Category Id Or SubCategory Id is not Valid !!"
          },
          "404": {
            "description": "Sub Category Or Category not found !!"
          }
        }
      },
      "get": {
        "tags": ["Products üì¶"],
        "summary": "get list of products",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "subCategory",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "brand",
            "in": "query",
            "schema": {
              "type": "array"
            },
            "description": "Filter by one or more brands"
          },
          {
            "name": "minPrice",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "maxPrice",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "attributes",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "{\"color\": \"blue\"}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "list of products will be returned with their rating"
          }
        }
      }
    },
    "/products/{id}": {
      "get": {
        "tags": ["Products üì¶"],
        "summary": "get one product",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "specfied product will be returned"
          },
          "400": {
            "description": "Product ID is not correct !!"
          },
          "404": {
            "description": "Product not found !!"
          }
        }
      },
      "delete": {
        "tags": ["Admin Dashboard üìà"],
        "summary": "delete product",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "deleted product will be returned"
          },
          "400": {
            "description": "Product ID is not correct !!"
          },
          "401": {
            "description": "Admin Token is not valid"
          },
          "404": {
            "description": "Product not found !!"
          }
        }
      }
    },

    "/products/discounted": {
      "get": {
        "summary": "Get all discounted products",
        "description": "Fetch all products with a discount greater than 0.",
        "tags": ["Products üì¶"],
        "responses": {
          "200": {
            "description": "A list of discounted products.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "discountedProduct": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "example": "65a1bc2d3f8b1c0f1e5d4a6b"
                          },
                          "name": { "type": "string", "example": "Laptop XYZ" },
                          "price": { "type": "number", "example": 20000000 },
                          "discountPercent": { "type": "number", "example": 20 }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No discounted products found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },

    "/cart": {
      "get": {
        "tags": ["Cart üõí"],
        "summary": "Get user's cart with product information",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "cart items with quantity and price will be returned"
          },
          "404": {
            "description": "User Cart Not Found !!"
          }
        }
      }
    },
    "/cart/add": {
      "post": {
        "tags": ["Cart üõí"],
        "summary": "add product to cart",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "productId": {
                    "type": "string",
                    "description": "The ID of the Products (MongoDB ObjectId).",
                    "example": "64b2fc0c3c2c4e8f12a45678"
                  },
                  "quantity": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cart with added item will be returned"
          },
          "400": {
            "description": "ProductId in not correct!!"
          },
          "404": {
            "description": "Product not found!!"
          }
        }
      }
    },
    "/cart/remove": {
      "post": {
        "tags": ["Cart üõí"],
        "summary": "remove product from cart",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "productId": {
                    "type": "string",
                    "description": "The ID of the Sub Category (MongoDB ObjectId).",
                    "example": "64b2fc0c3c2c4e8f12a45678"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "cart with added item will be returned"
          },
          "404": {
            "description": "Product not found or Product not Exist in User Cart"
          }
        }
      }
    },

    "/profile/": {
      "get": {
        "tags": ["Profile üë§"],
        "summary": "Get user's data with token",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "user data will be returned"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "The user has already been banned(Blocked)"
          }
        }
      }
    },
    "/profile/edit": {},
    "/profile/updatePassword": {},
    "/profile/me/addresses": {
      "post": {
        "tags": ["Profile üë§"],
        "summary": "add address",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "postalCode": {
                    "type": "string"
                  },
                  "coordinates": {
                    "type": "object",
                    "properties": {
                      "lat": {
                        "type": "number"
                      },
                      "lng": {
                        "type": "number"
                      }
                    }
                  },
                  "cityId": {
                    "type": "number"
                  },
                  "provinceId": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "updated user containing addresses will be returned"
          },
          "409": {
            "description": "Province Or City is Not Valid"
          }
        }
      }
    },
    "/profile/me/addresses/{addressId}": {
      "delete": {
        "tags": ["Profile üë§"],
        "summary": "delete address",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated user with addresses will be returned"
          },
          "404": {
            "description": "Address Not Found!!"
          }
        }
      }
    },

    "/orders/edit": {},
    "/orders/verify": {},

    "/comments/": {
      "post": {
        "tags": ["Comments ‚úçüèª"],
        "summary": "Add comment to product",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "productId": {
                    "type": "string"
                  },
                  "content": {
                    "type": "string"
                  },
                  "rating": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "created comment will be returned"
          },
          "403": {
            "description": "Product Id not correct"
          },
          "404": {
            "description": "Product not found !!"
          }
        }
      },
      "get": {
        "tags": ["Comments ‚úçüèª"],
        "summary": "Get product comments",
        "parameters": [
          {
            "name": "productId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "product comments and replies will be returned"
          },
          "400": {
            "description": "Product ID is not correct !!"
          }
        }
      }
    },
    "/comments/{commentId}": {
      "delete": {
        "tags": ["Admin Dashboard üìà"],
        "summary": "delete comment",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "commentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "deleted comment will be returned"
          },
          "403": {
            "description": "Comment ID is not correct !!"
          },
          "404": {
            "description": "Comment Not found for Deleted"
          }
        }
      }
    },
    "/comments/{commentId}/reply": {
      "post": {
        "tags": ["Comments ‚úçüèª"],
        "summary": "reply to a comment",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "commentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "created reply will be returned"
          },
          "400": {
            "description": "Comment Id not correct"
          }
        }
      }
    },
    "/comments/{commentId}/reply/{replyId}": {
      "delete": {
        "tags": ["Admin Dashboard üìà"],
        "summary": "delete reply",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "replyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "deleted reply will be returned"
          },
          "400": {
            "description": "Comment or Reply id is not correct !!"
          },
          "404": {
            "description": "Comment Or reply not found !!"
          },
          "403": {
            "description": "You have not access to this action !!"
          }
        }
      }
    },

    "/auth/ban/{userId}": {
      "post": {
        "tags": ["Admin Dashboard üìà"],
        "summary": "Ban user and remove his/her account",
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User banned successfully"
          },
          "401": {
            "description": "Admin Token is not valid"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  }
}
